#!/usr/bin/env bash

# The Linux command useradd allows a system administrator to create login accounts. The
# following is an example of how to use the command (must be in superuser mode);
# useradd smithj –m -c "John Smith, Scripting Course" –u 1001 –g 1001 –s /bin/bash
# The command above adds a login id called smithj to the Linux system, make the home directory
# for smithj, the owner is John Smith with comment included as Scripting Course, with User ID
# number (UID) 1001, Group ID (GID) number 1001, and setup the bash shell for user smithj.
# Your Assignment
# Customize and write a script to add new login id in an interactive mode. Your script should ask
# the user what Linux id to install, the user full name, what UID and GID to use (if nothing is
# entered for UID and GID, your Linux will use the default values), and what Linux shell to use
# (default should be setup as bash). Once you have all the values, your script will then implement
# the Linux useradd command to complete the task. Call your script addloginid.
# This assignment requires super-user access to run your script. This assignment must be written
# using your Linux server that you have installed earlier as one of your assignments. If you did not
# install it, then you will not be able to do this assignment.
# Your script MUST check all possible errors. The script will terminate if an error is
# encountered. Your script should check for the following possible errors:
# a) Only superuser can run the script.
# b) Duplicate Linux id should NOT be allowed.
# c) Linux id should have a minimum of three characters.
# The shell selected should only be either c, ksh, sh, or bash.
# d) User full name should not be blank.
# e) Make sure your script sets up a default password (any password).
# f) Make sure the id has a default .bash_profile file.
# g) Any other possible errors you can think of? Make your script robust!
# Submit your script with several test results. Include successful output and failure output.
# Demonstrate that you have done a thorough test on your script.


echo "By Henry Post, hpost@hawk.iit.edu.
ITMO 417 at IIT
"

function echo_prompt() {
  printf " > "
}

# Shells user is allowed to use.
ALLOWED_SHELL_PATHS=(
"sh"
"csh"
"ksh"
"zsh"
"bash"
"fish"
"ashellthatdoesntexist"
)

# Lets the user pick a value from a list.
# First arg is the list.
# Sets $RETURN_VALUE to their selected value.
function pick_string_from_list() {

    Options=("$@")
    OptionsLen=${#Options[@]}

    while true; do

        for index in "${!Options[@]}"; do
            echo "$index: ${Options[$index]}"
        done

        echo "Select an option (0-$(($OptionsLen - 1)))."

        echo_prompt
        read INPUT

        if ! [[ "$INPUT" =~ ^[0-9]+$ ]]; then
            echo "Input a number."
        elif ((INPUT > (OptionsLen - 1))); then
            echo "That number is too high!".
        else
            echo "Selecting '${Options[$INPUT]}'..."
            RETURN_VALUE="${Options[$INPUT]}"
            return 0
        fi
    done

}
# Make sure the script is being run as root.
function ensure_superuser() {
    if [[ $EUID -ne 0 ]]; then
       echo "This script must be run as root. Your UID is ${EUID}."
       exit 1
    fi
}

# Main loop.
function main() {
    ensure_superuser

    echo "This script sets up a new user."
    echo "It will ask you for a username, comment, UID (user id; optional), GID (group id; optional), and preferred shell."

    # Get username while it's empty or under 3 characters.
    while [[ -z ${username} || (( ${#username} -lt 3 )) ]]; do
        echo "Enter username (3+ characters):"
        echo_prompt
        read username

        # If user exists,
        if getent passwd "${username}" > /dev/null; then
            echo "User ${username} exists!"
            unset username
        fi

    done

    # Get comment.
    while [[ -z ${comment} ]]; do
        echo "Enter comment:"
        echo_prompt
        read comment
    done

    # Get preferred shell.
    while [[ -z ${shell} ]]; do
        echo "Enter preferred shell:"
        pick_string_from_list "${ALLOWED_SHELL_PATHS[@]}"
        shell=${RETURN_VALUE}

        # Make sure shell exists.
        if [[ -z "`which ${shell}`" ]]; then
            echo "Shell ${shell} does not exist or is not installed, or not on the \$PATH. Pick a different one."
            unset shell
        else
            echo "Using '$shell' at '`which $shell`'."
        fi

    done

    # Get the group id.
    GROUP_ID_OK=false
    while ! [[ ${GROUP_ID_OK} = true ]]; do

        # Assume it's ok.
        GROUP_ID_OK=true
        echo "Enter group id (or enter to automatically set):"
        read group_id

        if [[ -z ${group_id} ]]; then
            # It's empty. That's ok.
            echo "Automatically setting group id."
            GROUP_ID_OK=true

        elif ! expr -- "${group_id}" + 0 > /dev/null 2>&1; then
            # it is non-numeric.
            echo "Group ID must be numeric."
            GROUP_ID_OK=false

        elif getent group ${group_id}; then
            # group id exists.
            echo "Group id ${group_id} exists!"
            GROUP_ID_OK=false
        fi
    done

    # Get the user id.
    USER_ID_OK=false
    while ! [[ ${USER_ID_OK} = true ]]; do
        # Assume it's ok.
        USER_ID_OK=true
        echo "Enter user id (or enter to automatically set):"
        read user_id

        if [[ -z ${user_id} ]]; then
            # It's empty. That's ok.
            echo "Automatically setting user id."
            USER_ID_OK=true
        elif ! expr -- "${user_id}" + 0 > /dev/null 2>&1; then
            # it is non-numeric.
            echo "User ID must be numeric."
            USER_ID_OK=false
        elif getent passwd ${user_id}; then
            # user id exists.
            echo "User ID ${user_id} exists!"
            USER_ID_OK=false
        fi
    done

    # Base useradd command.
    useradd_command="useradd '${username}' -m -c '${comment}' -s '`which ${shell}`'"

    # If user id is unset, don't add it to the command.
    if [[ -z ${user_id} ]]; then
        true
    else # Else, use our user-provided user id.
        useradd_command="${useradd_command} -u ${user_id}"
    fi

    # If group id is unset, don't add it to the command.
    if [[ -z ${group_id} ]]; then
        true
    else # Else, use our user-provided group id.
        useradd_command="${useradd_command} -g ${group_id}"
    fi

    echo "About to execute this command:"
    echo "${useradd_command}"

    read -r -p "Is this okay? (yes/n)
 > " input
    case ${input} in

        [yY][eE][sS])
            echo "Continuing."
            ;;

        *)
            echo "Halting! Type 'yes'."
            exit 1
            ;;
    esac

    # Add the user.
    eval ${useradd_command}

    # Copy skel files.
    cp -rT /etc/skel /home/${username}
    ls -lash /home/${username}

    echo "username=${username};GID=${group_id};UID=${user_id} is set up!"

}

main