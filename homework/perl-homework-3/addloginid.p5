#!/usr/bin/env perl

use strict;
use warnings;
use warnings FATAL => 'all';

print "Henry Post, hpost\@hawk.iit.edu, ITMO 417 at IIT.\n";

=pod
Rewrite your midterm “Customize add login id script” from bash to Perl Language
The Linux command useradd allows a system administrator to create login accounts. The
following is an example of how to use the command (must be in superuser mode);
    useradd smithj –m -c "John Smith, Scripting Course" –u 1001 –g 1001 –s /bin/bash

The command above adds a login id called smithj to the Linux system, make the home directory
for smithj, the owner is John Smith with comment included as Scripting Course, with User ID
number (UID) 1001, Group ID (GID) number 1001, and setup the bash shell for user smithj.

Your Assignment

Customize and write a script to add new login id in an interactive mode. Your script should ask
the user what Linux id to install, the user full name, what UID and GID to use (if nothing is
entered for UID and GID, your Linux will use the default values), and what Linux shell to use
(default should be setup as bash). Once you have all the values, your script will then implement
the Linux useradd command to complete the task. Call your script addloginid.

This assignment requires super-user access to run your script. This assignment must be written
using your Linux server that you have installed earlier as one of your assignments. If you did not
install it, then you will not be able to do this assignment.

Your script MUST check all possible errors. The script will terminate if an error is
encountered. Your script should check for the following possible errors:

    a) Only superuser can run the script.
    b) Duplicate Linux id should NOT be allowed.
    c) Linux id should have a minimum of three characters.
    The shell selected should only be either c, ksh, sh, or bash.
    d) User full name should not be blank.
    e) Make sure your script sets up a default password (any password).
    f) Make sure the id has a default .bash_profile file.
    g) Any other possible errors you can think of? Make your script robust!

Submit your script with several test results. Include successful output and failure output.
Demonstrate that you have done a thorough test on your script.
=cut

my @ALLOWED_SHELLS = qw(sh csh ksh zsh bash fish ashellthatdoesntexist);

sub ensure_superuser {
    if ($< != 0) {
        die(
            ("Current user's ID is $<, which is not root's UID (0).\n") .
                ("You must be superuser to run this script.\n")
        );
    }
}

sub print_prompt {
    printf " > "
}

# This function will ask the user for a string with a minimum length, repeatedly
# until it is satisfied.
sub get_string_min_length {
    my ($min_length, $name) = @_;

    while (1) {

        print("The '$name' must be $min_length characters or longer:\n");
        print_prompt;

        my $input = <STDIN>;
        chomp $input;
        print("You input '$input'.\n");

        # If input is not long enough,
        if ((length($input)) < $min_length) {
            print("'$input' is not long enough!\n");
            print("The '$name' is only " . (length $input) . " characters long, but it should be $min_length characters long!\n")
        }
        else {
            return $input
        }
    }

}

# Ask for a numeric value from the user.
sub get_numeric_value {
    my ($name) = @_;

    while (1) {

        print("Enter '$name' number:\n");

        my $input = <STDIN>;
        chomp $input;
        print("You input '$input'.\n");

        # If input is numeric,
        if (($input =~ /^[0-9]+$/)) {
            return $input
        }
        else {
            print("'$input' is not numeric!\n");
        }
    }

}

# Lets the user pick a value from a list.
# First arg is the list.
sub pick_string_from_list {

    # Reference to input array
    my ($list_ref, $name) = @_;

    # Dereference...reference...I think, and get length of it.
    my $list_len = (scalar @$list_ref) - 1;

    # print('todo'); #TODO
    # print($list_ref->[1]);

    while (1) {

        # Print their number range
        print("Valid choices of '$name': 0-" . $list_len . ":\n");

        # Print the list of strings
        for (my $i = 0; $i <= $list_len; $i++) {
            print "$i) " . $list_ref->[$i] . "\n";
        }

        my $input = '';
        chomp($input = <STDIN>);
        print("You input '$input'.\n");

        # If number is numeric,
        if ($input =~ /^[0-9]+$/) {
            $input = int($input);

            # If <0 or >max
            if ($input < 0 || $input > $list_len) {
                print("$input is out of range!\n")
            }
            else { # Numeric and in range. Good!
                return $list_ref->[$input]
            }
        }
        else {
            print("'$input' is not numeric!\n")
        }
    }
}

# Does this user exist?
sub user_exists {
    my ($username) = @_;

    return `getent passwd $username`
}

# Does this group id exist?
sub group_id_exists {
    my ($groupid) = @_;

    return `getent group $groupid`
}

sub user_id_exists {
    my ($userid) = @_;

    return `getent passwd $userid`
}

# For when you need "YES" or "NO" in full.
sub get_yes_no_full {
    while (1) {
        print_prompt;
        chomp(my $input = <STDIN>);

        if ($input =~ /^YES$/) {
            return $input;
        }
        elsif ($input =~ /^NO$/) {
            return "";
        }
        else {
            print("$input does not match YES or NO. Please enter it in full.\n");
        }

    }


}

sub get_yn_no_print {
    chomp(my $input = <STDIN>);

    if ($input =~ /^[Y]?$/i) { # Match Yy or blank
        return "true"
    }
    else { # False or 'n' or something else
        return ""
    }
}

sub get_yn_prompt {
    print_prompt();
    return get_yn_no_print()
}

# Get a shell's path, or '' if DNE.
sub shell_path {
    my ($shell) = @_;

    my $shellpath = `which $shell`;
    chomp $shellpath;

    return $shellpath;
}

# Does this shell exist on the path?
sub shell_exists {
    my ($shell) = @_;

    return shell_path($shell)
}

sub make_useradd_command {
    my ($username, $groupid, $userid, $comment, $shellPath) = @_;

    my $command = "useradd '$username' -m -c '$comment' -s '$shellPath'";

    # If uid is not empty,
    if ($userid ne '') {
        $command = $command . " -u $userid"
    }

    # If group id is not empty,
    if ($groupid ne '') {
        $command = $command . " -g $groupid"
    }

    return $command;
}

sub main {

    ensure_superuser;

    # Vars user can influence
    my $username = '';
    my $groupid = '';
    my $userid = '';
    my $comment = '';
    my $selectedShell = '';

    my $auto_group_id = '';
    my $auto_user_id = '';

    print "This script sets up a new user.\n";
    print "It will ask you for a username, comment, UID (user id; optional), GID (group id; optional), and preferred shell.\n";

    # Get username
    while (1) {
        $username = get_string_min_length(3, "username");

        if (user_exists($username)) {
            print("User '$username' already exists!\n")
        }
        else { # It doesn't exist, they're good.
            last;
        }
    }
    print("You've selected $username as your username.\n");

    # Get shell
    while (1) {
        $selectedShell = pick_string_from_list(\@ALLOWED_SHELLS, 'shell');

        if (shell_exists($selectedShell)) {
            print("You've selected $selectedShell as your shell.\n");
            last;
        }
        else {
            print("Shell '$selectedShell' does not exist!\n");
        }

    }

    # Get comment
    $comment = get_string_min_length(0, "comment");
    print("You've selected '$comment' as your comment.\n");

    print("Do you want to select a group ID manually? (y/n)\n");
    # Group ID prompt
    if (get_yn_prompt() ne '') {

        # Get a group id
        while (1) {
            $groupid = get_numeric_value('group id');
            if (!group_id_exists($groupid)) {
                print("Group ID $groupid already exists! Pick a new one.\n");
            }
            else {
                last;
            }
        }
    }
    else {
        print("Selecting a group ID automatically.\n");
        $auto_group_id = "true";
    }

    print("Do you want to select a user ID manually? (y/n)\n");
    # User id prompt
    if (get_yn_prompt() ne '') {

        # Get a user id
        while (1) {
            $userid = get_numeric_value('user id');
            if (user_id_exists($userid)) {
                print("User ID $userid already exists! Pick a new one.\n");
            }
            else {
                last;
            }
        }
    }
    else {
        print("Selecting a user ID automatically.\n");
        $auto_user_id = "true";
    }

    my $command = make_useradd_command($username, $groupid, $userid,
        $comment, shell_path($selectedShell));

    print("Command to be executed:");

    print("\n\n\t\t$command\n\n");

    print("Is this okay?\n");

    if (get_yes_no_full) {

        system("$command");

        print("Copying skeleton files...\n");
        system("cp -rT /etc/skel /home/${username}");
        system("ls -lash /home/${username}");

        print("Expiring password...\n");
        system("passwd -e ${username}");

        print "username=${username};GID=${groupid};UID=${userid} is set up!\n"

    }
    else {
        die("Aborting!")
    }

}


main()
